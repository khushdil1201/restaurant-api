swagger: "2.0"
info:
  description: "This is a sample server for a restaurant."
  title: "Restaurant API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name: "API Support"
    url: "http://www.swagger.io/support"
    email: "support@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  version: "1.0"
host: "localhost:8080"
basePath: "/"
paths:
  /register:
    post:
      description: "Register a new user with the provided credentials"
      produces:
        - "application/json"
      summary: "Register a new user"
      parameters:
        - description: "User credentials"
          name: "user"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "User registered successfully"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
        "400":
          description: "Invalid input"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
  /login:
    post:
      description: "Login a user and return a JWT token"
      produces:
        - "application/json"
      summary: "Login a user"
      parameters:
        - description: "User credentials"
          name: "user"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "Login successful"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
        "400":
          description: "Invalid input"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
  /menu:
    get:
      description: "Get the list of menu items"
      produces:
        - "application/json"
      summary: "Get menu"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MenuItem"
    post:
      description: "Add a new menu item"
      produces:
        - "application/json"
      summary: "Add menu item"
      parameters:
        - description: "Menu item"
          name: "item"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/MenuItem"
      responses:
        "200":
          description: "Menu item added"
          schema:
            $ref: "#/definitions/MenuItem"
  /menu/{id}:
    delete:
      description: "Delete a menu item by ID"
      produces:
        - "application/json"
      summary: "Delete menu item"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Menu item deleted"
          schema:
            type: "object"
            additionalProperties:
              type: "boolean"
definitions:
  User:
    type: "object"
    required:
      - "username"
      - "password"
      - "role"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"
  MenuItem:
    type: "object"
    properties:
      ID:
        type: "integer"
      Name:
        type: "string"
      Description:
        type: "string"
      Price:
        type: "number"
